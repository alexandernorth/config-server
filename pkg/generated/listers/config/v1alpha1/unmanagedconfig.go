/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/sdcio/config-server/apis/config/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UnManagedConfigLister helps list UnManagedConfigs.
// All objects returned here must be treated as read-only.
type UnManagedConfigLister interface {
	// List lists all UnManagedConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UnManagedConfig, err error)
	// UnManagedConfigs returns an object that can list and get UnManagedConfigs.
	UnManagedConfigs(namespace string) UnManagedConfigNamespaceLister
	UnManagedConfigListerExpansion
}

// unManagedConfigLister implements the UnManagedConfigLister interface.
type unManagedConfigLister struct {
	indexer cache.Indexer
}

// NewUnManagedConfigLister returns a new UnManagedConfigLister.
func NewUnManagedConfigLister(indexer cache.Indexer) UnManagedConfigLister {
	return &unManagedConfigLister{indexer: indexer}
}

// List lists all UnManagedConfigs in the indexer.
func (s *unManagedConfigLister) List(selector labels.Selector) (ret []*v1alpha1.UnManagedConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UnManagedConfig))
	})
	return ret, err
}

// UnManagedConfigs returns an object that can list and get UnManagedConfigs.
func (s *unManagedConfigLister) UnManagedConfigs(namespace string) UnManagedConfigNamespaceLister {
	return unManagedConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UnManagedConfigNamespaceLister helps list and get UnManagedConfigs.
// All objects returned here must be treated as read-only.
type UnManagedConfigNamespaceLister interface {
	// List lists all UnManagedConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UnManagedConfig, err error)
	// Get retrieves the UnManagedConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.UnManagedConfig, error)
	UnManagedConfigNamespaceListerExpansion
}

// unManagedConfigNamespaceLister implements the UnManagedConfigNamespaceLister
// interface.
type unManagedConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UnManagedConfigs in the indexer for a given namespace.
func (s unManagedConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.UnManagedConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UnManagedConfig))
	})
	return ret, err
}

// Get retrieves the UnManagedConfig from the indexer for a given namespace and name.
func (s unManagedConfigNamespaceLister) Get(name string) (*v1alpha1.UnManagedConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("unmanagedconfig"), name)
	}
	return obj.(*v1alpha1.UnManagedConfig), nil
}
